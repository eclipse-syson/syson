{"openapi":"3.1.0","info":{"title":"OpenAPI definition","version":"v0"},"paths":{"/api/rest/projects/{projectId}":{"get":{"tags":["project-rest-controller"],"description":"Get project with the given id (projectId).","operationId":"getProjectById","parameters":[{"name":"projectId","in":"path","required":true,"schema":{"type":"string"}}],"responses":{"404":{"description":"Not Found"},"200":{"description":"OK","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Project"}}}}}},"put":{"tags":["project-rest-controller"],"description":"Update the project with the given id (projectId).","operationId":"updateProject","parameters":[{"name":"projectId","in":"path","required":true,"schema":{"type":"string"}},{"name":"name","in":"query","required":false,"schema":{"type":"string"}},{"name":"description","in":"query","required":false,"schema":{"type":"string"}},{"name":"branch","in":"query","required":false,"schema":{"$ref":"#/components/schemas/Branch"}}],"responses":{"404":{"description":"Not Found"},"200":{"description":"OK","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Project"}}}}}},"delete":{"tags":["project-rest-controller"],"description":"Delete the project with the given id (projectId).","operationId":"deleteProject","parameters":[{"name":"projectId","in":"path","required":true,"schema":{"type":"string"}}],"responses":{"200":{"description":"OK","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Project"}}}},"204":{"description":"No content"}}}},"/api/rest/projects":{"get":{"tags":["project-rest-controller"],"description":"Get all projects.","operationId":"getProjects","parameters":[{"name":"page[size]","in":"query","required":false,"schema":{"type":"integer","format":"int32"}},{"name":"page[after]","in":"query","required":false,"schema":{"type":"string"}},{"name":"page[before]","in":"query","required":false,"schema":{"type":"string"}}],"responses":{"200":{"description":"OK","content":{"application/json":{"schema":{"type":"array","items":{"$ref":"#/components/schemas/Project"}}}}}}},"post":{"tags":["project-rest-controller"],"description":"Create a new project with the given name and description (optional).","operationId":"createProject","parameters":[{"name":"name","in":"query","required":true,"schema":{"type":"string"}},{"name":"description","in":"query","required":false,"schema":{"type":"string"}}],"responses":{"201":{"description":"Created","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Project"}}}}}}},"/api/rest/projects/{projectId}/commits":{"get":{"tags":["commit-rest-controller"],"description":"Get all the commits in the given project.","operationId":"getCommits","parameters":[{"name":"projectId","in":"path","required":true,"schema":{"type":"string"}}],"responses":{"404":{"description":"Not Found"},"200":{"description":"OK","content":{"application/json":{"schema":{"type":"array","items":{"$ref":"#/components/schemas/Commit"}}}}}}},"post":{"tags":["commit-rest-controller"],"description":"Create a new commit with the given change (collection\nof DataVersion records) in the given branch of the\nproject. If the branch is not specified, the default branch\nof the project is used. Commit.change should include\nthe following for each Data object that needs to be\ncreated, updated, or deleted in the new commit. (1)\nCreating Data - Commit.change should include a\nDataVersion record with DataVersion.payload\npopulated with the Data being created.\nDataVersion.identity is not provided, thereby indicating\nthat a new DataIdentity needs to be created in the new\ncommit. (2) Updating Data - Commit.change should\ninclude a DataVersion record with DataVersion.payload\npopulated with the updated Data. DataVersion.identity\nshould be populated with the DataIdentity for which a\nnew DataVersion record will be created in the new\ncommit. (3) Deleting Data - Commit.change should\ninclude a DataVersion record with DataVersion.payload\nnot provided, thereby indicating deletion of DataIdentity\nin the new commit. DataVersion.identity should be\npopulated with the DataIdentity that will be deleted in\nthe new commit. When a DataIdentity is deleted in a\ncommit, all its versions (DataVersion) are also deleted,\nand any references from other DataIdentity are also\nremoved to maintain data integrity. In addition, for\nElement Data (KerML), deletion of an Element must\nalso result in deletion of incoming Relationships. When\nElement Data (KerML) is created or updated, derived\nproperties must be computed or verified if the API\nprovider claims Derived Property Conformance.\n","operationId":"createCommit","parameters":[{"name":"projectId","in":"path","required":true,"schema":{"type":"string"}},{"name":"branchId","in":"query","required":false,"schema":{"type":"string","format":"uuid"}}],"requestBody":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/CommitRequest"}}},"required":true},"responses":{"201":{"description":"Created","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Commit"}}}}}}},"/api/rest/projects/{projectId}/branches":{"get":{"tags":["branch-rest-controller"],"description":"Get branches by project.","operationId":"getBranches","parameters":[{"name":"projectId","in":"path","required":true,"schema":{"type":"string"}}],"responses":{"404":{"description":"Not Found"},"200":{"description":"OK","content":{"application/json":{"schema":{"type":"array","items":{"$ref":"#/components/schemas/Branch"}}}}}}},"post":{"tags":["branch-rest-controller"],"description":"Create branch by project.","operationId":"createBranch","parameters":[{"name":"projectId","in":"path","required":true,"schema":{"type":"string"}}],"requestBody":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/RestBranchRequest"}}},"required":true},"responses":{"201":{"description":"Created","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Branch"}}}}}}},"/api/rest/projects/{projectId}/commits/{commitId}":{"get":{"tags":["commit-rest-controller"],"description":"Get the commit with the given id (commitId) in the given project.","operationId":"getCommitById","parameters":[{"name":"projectId","in":"path","required":true,"schema":{"type":"string"}},{"name":"commitId","in":"path","required":true,"schema":{"type":"string","format":"uuid"}}],"responses":{"404":{"description":"Not Found"},"200":{"description":"OK","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Commit"}}}}}}},"/api/rest/projects/{projectId}/commits/{commitId}/roots":{"get":{"tags":["object-rest-controller"],"description":"Get all the root elements in the given project at the given commit.","operationId":"getRootElements","parameters":[{"name":"projectId","in":"path","required":true,"schema":{"type":"string"}},{"name":"commitId","in":"path","required":true,"schema":{"type":"string","format":"uuid"}}],"responses":{"200":{"description":"OK","content":{"application/json":{"example":[{"@id":"9f2e43d4-2f7e-49f1-816a-a4e0d3d1f370","attribute1":"hello"},{"@id":"bab1f7be-82e0-4d14-bc60-b12a60c46f2f","attribute1":"bye"}]}}},"404":{"description":"Not Found"}}}},"/api/rest/projects/{projectId}/commits/{commitId}/elements":{"get":{"tags":["object-rest-controller"],"description":"Get all the elements in a given project at the given commit.","operationId":"getElements","parameters":[{"name":"projectId","in":"path","required":true,"schema":{"type":"string"}},{"name":"commitId","in":"path","required":true,"schema":{"type":"string","format":"uuid"}}],"responses":{"200":{"description":"OK","content":{"application/json":{"example":[{"@id":"9f2e43d4-2f7e-49f1-816a-a4e0d3d1f370","attribute1":"hello"},{"@id":"bab1f7be-82e0-4d14-bc60-b12a60c46f2f","attribute1":"bye"}]}}},"404":{"description":"Not Found"}}}},"/api/rest/projects/{projectId}/commits/{commitId}/elements/{relatedElementId}/relationships":{"get":{"tags":["object-rest-controller"],"description":"Get relationships that are incoming, outgoing, or both relative to the given related element.","operationId":"getRelationshipsByRelatedElement","parameters":[{"name":"projectId","in":"path","required":true,"schema":{"type":"string"}},{"name":"commitId","in":"path","required":true,"schema":{"type":"string","format":"uuid"}},{"name":"relatedElementId","in":"path","required":true,"schema":{"type":"string","format":"uuid"}},{"name":"direction","in":"query","required":false,"schema":{"type":"string","enum":["IN","OUT","BOTH"]}}],"responses":{"200":{"description":"OK","content":{"application/json":{"example":[{"@id":"9f2e43d4-2f7e-49f1-816a-a4e0d3d1f370","attribute1":"hello"},{"@id":"bab1f7be-82e0-4d14-bc60-b12a60c46f2f","attribute1":"bye"}]}}},"404":{"description":"Not Found"}}}},"/api/rest/projects/{projectId}/commits/{commitId}/elements/{elementId}":{"get":{"tags":["object-rest-controller"],"description":"Get element with the given id (elementId) in the given project at the given commit.","operationId":"getElementById","parameters":[{"name":"projectId","in":"path","required":true,"schema":{"type":"string"}},{"name":"commitId","in":"path","required":true,"schema":{"type":"string","format":"uuid"}},{"name":"elementId","in":"path","required":true,"schema":{"type":"string","format":"uuid"}}],"responses":{"200":{"description":"OK","content":{"application/json":{"example":{"@id":"9f2e43d4-2f7e-49f1-816a-a4e0d3d1f370","attribute1":"hello"}}}},"404":{"description":"Not Found"}}}},"/api/rest/projects/{projectId}/commits/{commitId}/changes":{"get":{"tags":["commit-rest-controller"],"description":"Get the change in the given commit of the given project.","operationId":"getCommitChange","parameters":[{"name":"projectId","in":"path","required":true,"schema":{"type":"string"}},{"name":"commitId","in":"path","required":true,"schema":{"type":"string","format":"uuid"}},{"name":"changeTypes","in":"query","required":false,"schema":{"type":"array","items":{"type":"string","enum":["CREATED","UPDATED","DELETED"]}}}],"responses":{"404":{"description":"Not Found"},"200":{"description":"OK","content":{"application/json":{"schema":{"type":"array","items":{"$ref":"#/components/schemas/DataVersion"}}}}}}}},"/api/rest/projects/{projectId}/commits/{commitId}/changes/{changeId}":{"get":{"tags":["commit-rest-controller"],"description":"Get the change with the given id (changeId) in the given commit of the given project. The changeId is the id of the DataVersion that changed in the commit.","operationId":"getCommitChangeById","parameters":[{"name":"projectId","in":"path","required":true,"schema":{"type":"string"}},{"name":"commitId","in":"path","required":true,"schema":{"type":"string","format":"uuid"}},{"name":"changeId","in":"path","required":true,"schema":{"type":"string","format":"uuid"}}],"responses":{"200":{"description":"OK","content":{"application/json":{"schema":{"$ref":"#/components/schemas/DataVersion"}}}},"404":{"description":"Not Found"}}}},"/api/rest/projects/{projectId}/branches/{branchId}":{"get":{"tags":["branch-rest-controller"],"description":"Get branch by project and ID.","operationId":"getBranchById","parameters":[{"name":"projectId","in":"path","required":true,"schema":{"type":"string"}},{"name":"branchId","in":"path","required":true,"schema":{"type":"string","format":"uuid"}}],"responses":{"404":{"description":"Not Found"},"200":{"description":"OK","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Branch"}}}}}},"delete":{"tags":["branch-rest-controller"],"description":"Delete branch by project and ID.","operationId":"deleteBranch","parameters":[{"name":"projectId","in":"path","required":true,"schema":{"type":"string"}},{"name":"branchId","in":"path","required":true,"schema":{"type":"string","format":"uuid"}}],"responses":{"404":{"description":"Not Found"},"204":{"description":"No content"},"200":{"description":"OK","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Branch"}}}}}}}},"components":{"schemas":{"Branch":{"type":"object","description":"Branch is an indirect subclass of Record (via CommitReference) that represents an independent line of development in a Project. A Project can have 1 or more Branches. When a Project is created, a default Branch is also created. The default Branch of a Project can be changed, and a Project can have only 1 default Branch.","properties":{"@id":{"type":"string","format":"uuid","description":"The UUID assigned to the record"},"@type":{"type":"string","description":"Branch"},"created":{"type":"string","format":"date-time","description":"The timestamp at which the Branch was created, in ISO8601DateTime format"},"head":{"$ref":"#/components/schemas/Identified","description":"The Commit to which the Branch is currently pointing. It represents the latest state of the Project on the given Branch"},"name":{"type":"string","description":"The name of the Branch"},"owningProject":{"$ref":"#/components/schemas/Identified","description":"The Project that owns the given Branch"},"referencedCommit":{"$ref":"#/components/schemas/Identified","description":"The Commit referenced by the Branch"}},"required":["@id","@type","created","name","owningProject","referencedCommit"]},"Identified":{"type":"object","description":"Identified represents an Object through its ID and type.","properties":{"@id":{"type":"string"}}},"Project":{"type":"object","description":"Project is a subclass of Record that represents a container for other Records and an entry point for version management and data navigation.","properties":{"@id":{"type":"string","description":"The UUID assigned to the record"},"@type":{"type":"string","description":"Project"},"created":{"type":"string","format":"date-time","description":"The creation timestamp for the Project, in ISO8601DateTime format"},"defaultBranch":{"$ref":"#/components/schemas/Identified","description":"The default branch in the Project and a subset of branches"},"description":{"type":"string","description":"The statement that provides details about the record"},"name":{"type":"string","description":"The name of the Project"}},"required":["@id","@type","created","defaultBranch","name"]},"CommitRequest":{"type":"object","description":"CommitRequest is used as the body of the createCommit POST request.","properties":{"@type":{"type":"string","description":"Commit"},"change":{"type":"array","description":"The content of CommitRequest for creating, updating,\nand deleting Data maps directly to the corresponding PIM\noperation (createCommit), and is described below.\nFor creating new Data, CommitRequest.change should\ninclude a DataVersion where DataVersion.payload\nincludes the Data being created and\nDataVersion.identity is either not specified or set to a\nnew DataIdentity that does not already exist in any of\nthe previousCommits.\nFor updating existing Data, CommitRequest.change\nshould include a DataVersion where\nDataVersion.payload includes the updated Data, and\nDataVersion.identity is the DataIdentity for which a\nnew DataVersion will be created in the commit.\nFor deleting existing Data, CommitRequest.change\nshould include a DataVersion where\nDataVerision.payload is not specified, and\nDataVersion.identity is the DataIdentity that will be\ndeleted in the commit.\n","items":{"$ref":"#/components/schemas/DataVersionRequest"}},"description":{"type":"string","description":"The statement that provides details about the record"}},"required":["@type","change"]},"DataIdentityRequest":{"type":"object","description":"DataIdentityRequest is used by DataVersionRequest in CommitRequest in the createCommit POST request.","properties":{"@id":{"type":"string","format":"uuid","description":"The UUID assigned to the record"},"@type":{"type":"string","description":"DataIdentity"}},"required":["@id","@type"]},"DataRequest":{"type":"object","description":"DataRequest is used by DataVersionRequest in CommitRequest in the createCommit POST request. It's one of ElementRequest, ExternalDataRequest, ExternalRelationshipRequest or ProjectUsageRequest."},"DataVersionRequest":{"type":"object","description":"DataVersionRequest is used by CommitRequest in the createCommit POST request.","properties":{"@type":{"type":"string","description":"DataVersion"},"identity":{"$ref":"#/components/schemas/DataIdentityRequest","description":"DataVersion.identity is unique among records listed in\nCommit.versionedData and in Commit.change.\nDataVersion.identity is either left empty, in which case\na new DataIdentity needs to be created by the Service\nand assigned to DataVersion.identity in the new\ncommit; or provided a brand new value (one that does\nnot already exist in any of the previousCommits) by the\nclient and accepted by the Service as is\n"},"payload":{"$ref":"#/components/schemas/DataRequest","description":"DataVersion.payload should be populated with the Data being created"}},"required":["@type"]},"Commit":{"type":"object","description":"Commit is a subclass of Record that represents the changes made to a Project at a specific point in time in its lifecycle, such as the creation, update, or deletion of data in a Project. A Project has 0 or more Commits.","properties":{"@id":{"type":"string","format":"uuid","description":"The UUID assigned to the record"},"@type":{"type":"string","description":"Commit"},"created":{"type":"string","format":"date-time","description":"The timestamp at which the Commit was created, in ISO8601DateTime format"},"description":{"type":"string","description":"The statement that provides details about the record"},"owningProject":{"$ref":"#/components/schemas/Identified","description":"The Project that owns the Commit"},"previousCommits":{"type":"array","description":"The set of immediately preceding Commits","items":{"$ref":"#/components/schemas/Identified"}}},"required":["@id","@type","created","owningProject","previousCommits"]},"RestBranchRequest":{"type":"object","properties":{"@type":{"type":"string"},"head":{"$ref":"#/components/schemas/Identified"},"name":{"type":"string"}}},"DataIdentity":{"type":"object","description":"DataIdentity is a subclass of Record that represents a unique, version-independent representation of Data through its lifecycle. A DataIdentity is associated with 1 or more DataVersion records that represent different versions of the same Data.","properties":{"@id":{"type":"string","format":"uuid","description":"The UUID assigned to the record"},"@type":{"type":"string","description":"DataIdentity"}},"required":["@id","@type"]},"DataVersion":{"type":"object","description":"DataVersion is a subclass of Record that represents Data at a specific version in its lifecycle. A DataVersion record is associated with only one DataIdentity record. DataVersion serves as a wrapper for Data (payload) in the context of a Commit in a Project.","properties":{"@id":{"type":"string","format":"uuid","description":"The UUID assigned to the record"},"@type":{"type":"string","description":"DataVersion"},"identity":{"$ref":"#/components/schemas/DataIdentity","description":"The Data Identity common to all versions of the same Data"},"payload":{"type":"object","description":"Data if exists in the commit, null otherwise"}},"required":["@id","@type","identity"]}}}}